{% extends 'base.html' %}

{% block title %}Retirement Planner{% endblock %}

{% block content %}
<div class="container mt-4">
  <h2 class="text-center mb-4">🧼 Retirement Planner</h2>

  <!-- ===== CALCULATE FORM (self-contained) ===== -->
  <form method="POST" action="{{ url_for('projects.retirement') }}">
    <div class="row g-3">
      {% set inputs = [
        ("Current Age", "current_age", "Your current age."),
        ("Retirement Age", "retirement_age", "The age at which you plan to retire."),
        ("Monthly Savings ($)", "annual_saving", "Your monthly savings amount before retirement."),
        ("Annual Saving Increase Rate (%)", "saving_increase_rate", "The expected yearly percentage increase in your monthly savings, accounting for raises or increased capacity."),
        ("Pre-Retire Return Rate (%)", "return_rate", "Expected average annual return on your investments before retirement. Influences how your assets grow during working years."),
        ("Post-Retire Return Rate (%)", "return_rate_after", "Expected average annual return on your investments after retirement. Usually lower due to conservative investment strategies."),
        ("Expected Lifespan (Age)", "lifespan", "Your estimated age until which you expect to live. Important for planning how long your assets must last."),
        ("Monthly Living Expense ($)", "monthly_living_expense", "Average monthly spending expected during retirement for living costs."),
        ("Income Tax Rate (%)", "income_tax_rate", "Your effective income tax rate applied to income."),
        ("Inflation Rate (%)", "inflation_rate", "Annual inflation rate used to adjust expenses and asset growth for future purchasing power."),
        ("Current Assets ($)", "current_assets", "Total value of your current investment and savings assets."),
        ("Living Expense Support / CPP (Monthly $)", "cpp_support", "Monthly income expected from CPP or other support reducing your living expenses during retirement."),
        ("Extended Year From (Age)", "cpp_from_age", "The age when you start receiving extended support such as CPP."),
        ("Extended Year To (Age)", "cpp_to_age", "The age until which extended support such as CPP will be received.")
      ] %}

      {% for label, name, tooltip in inputs %}
      <div class="col-md-3">
        <label class="form-label">
          {{ label }}
          {% if tooltip %}
          <span tabindex="0" data-bs-toggle="tooltip" data-bs-placement="top" title="{{ tooltip }}"
                style="cursor: pointer; color: #0d6efd; font-weight: bold;">&#9432;</span>
          {% endif %}
        </label>
        <input type="number" name="{{ name }}" class="form-control"
               step="{% if 'rate' in name or 'inflation' in name or 'return' in name %}0.1{% else %}1{% endif %}"
               {% if 'cpp' in name or 'liquidation' in name %}min="-9999999"{% endif %}
               value="{{ '0' if reset else request.form.get(name, '0') }}">
      </div>
      {% endfor %}

      <!-- Asset Liquidation Amounts and Ages with tooltip -->
      {% set asset_tooltips = {
        "asset_liquidation_1": "Amounts you expect to liquidate (sell or withdraw) from your asset 1 at specific ages.",
        "asset_liquidation_age_1": "Estimated age when you plan to liquidate asset 1.",
        "asset_liquidation_2": "Amounts you expect to liquidate (sell or withdraw) from your asset 2 at specific ages.",
        "asset_liquidation_age_2": "Estimated age when you plan to liquidate asset 2.",
        "asset_liquidation_3": "Amounts you expect to liquidate (sell or withdraw) from your asset 3 at specific ages.",
        "asset_liquidation_age_3": "Estimated age when you plan to liquidate asset 3."
      } %}
      {% for name, tooltip in asset_tooltips.items() %}
      <div class="col-md-3">
        <label class="form-label">
          {{ name.replace('_', ' ').title() }}
          <span tabindex="0" data-bs-toggle="tooltip" data-bs-placement="top" title="{{ tooltip }}"
                style="cursor: pointer; color: #0d6efd; font-weight: bold;">&#9432;</span>
        </label>
        <input type="number" name="{{ name }}" class="form-control" step="1"
               value="{{ '0' if reset else request.form.get(name, '0') }}">
      </div>
      {% endfor %}

      <!-- Return Std Dev Dropdown with tooltip -->
      <div class="col-md-3">
        <label class="form-label">
          Return Std Dev (%)
          <span tabindex="0" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true"
                title="Standard deviation measures the variability of your investment returns, representing the level of risk or volatility.<br>
                - Conservative (8%): Lower volatility, steadier returns, less chance of large losses or gains. Suitable if you prefer stability.<br>
                - Balanced (12%): Moderate volatility, a balance between risk and reward. Suitable for typical investors aiming for growth with manageable risk.<br>
                - Aggressive (18%): Higher volatility, higher chance of large gains or losses. Suitable if you are willing to take more risk for potentially higher returns.<br>
                It impacts the Monte Carlo simulation results by affecting the range and likelihood of possible future outcomes."
                style="cursor: pointer; color: #0d6efd; font-weight: bold;">&#9432;</span>
        </label>
        <select class="form-select" name="return_std">
          {% set std_options = [("Conservative (8%)", "8"), ("Balanced (12%)", "12"), ("Aggressive (18%)", "18")] %}
          {% for label, value in std_options %}
          <option value="{{ value }}" {% if return_std == value %}selected{% endif %}>{{ label }}</option>
          {% endfor %}
        </select>
      </div>

      <!-- Inflation Std Dev Dropdown -->
      <div class="col-md-3">
        <label class="form-label">
          Inflation Std Dev (%)
          <span tabindex="0" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true"
                title="Represents variability in inflation. Higher values indicate more unpredictable inflation affecting your expenses."
                style="cursor: pointer; color: #0d6efd; font-weight: bold;">&#9432;</span>
        </label>
        <select class="form-select" name="inflation_std">
          {% set inf_options = [("Stable (0.5%)", "0.5"), ("Typical (1%)", "1.0"), ("Volatile (2%)", "2.0")] %}
          {% for label, value in inf_options %}
          <option value="{{ value }}" {% if inflation_std == value %}selected{% endif %}>{{ label }}</option>
          {% endfor %}
        </select>
      </div>

      <!-- Scenario Name -->
      <div class="col-md-6 mt-3">
        <label for="scenario_name_input" class="form-label">
          Scenario Name
          <span tabindex="0" data-bs-toggle="tooltip" data-bs-placement="top"
                title="Name your retirement scenario to save it for future use."
                style="cursor: pointer; color: #0d6efd; font-weight: bold;">&#9432;</span>
        </label>
        <input type="text" id="scenario_name_input" name="scenario_name"
               class="form-control" placeholder="Enter scenario name to save" />
      </div>
    </div> <!-- /row g-3 -->

    <!-- Buttons (inside calc form) -->
    <div class="text-center mt-4">
      <button type="submit" name="action" value="calculate" class="btn btn-primary px-4">Calculate</button>
      <button type="submit" name="action" value="reset" class="btn btn-secondary px-4 ms-2">Reset</button>
      <button type="button" class="btn btn-success px-4 ms-2" onclick="triggerSaveScenario()">Save Scenario</button>
    </div>

    <!-- Load / Delete Saved Scenario -->
    <div class="col-md-6 mt-3">
      <label for="load_scenario_select" class="form-label">
        Load Saved Scenario
        <span tabindex="0" data-bs-toggle="tooltip" data-bs-placement="top"
              title="Select a saved scenario to load."
              style="cursor: pointer; color: #0d6efd; font-weight: bold;">&#9432;</span>
      </label>
      <select id="load_scenario_select" name="load_scenario_select" class="form-select">
        <option value="">-- Select Scenario --</option>
        {% for scenario in saved_scenarios %}
          <option value="{{ scenario.id }}" {% if selected_scenario_id|string == scenario.id|string %}selected{% endif %}>
            {{ scenario.scenario_name }}
          </option>
        {% endfor %}
      </select>

      <div class="mt-2">
        <button type="button" class="btn btn-info me-2" onclick="loadSelectedScenario()">Load Scenario</button>
        <button type="button" class="btn btn-danger" onclick="deleteSelectedScenario()">Delete Scenario</button>
      </div>
    </div>

    <!-- Init tooltips (safe inside this form) -->
    <script>
      var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
      var tooltipList = tooltipTriggerList.map(function (el) { return new bootstrap.Tooltip(el); });
    </script>
  </form>
  <!-- ===== END CALCULATE FORM ===== -->


        {% if result %}
        <div class="alert alert-success mt-5 text-center">
            <h4>📈 Estimated Final Asset Balance: <strong>${{ "{:,.0f}".format(result) }}</strong></h4>
            <p>assuming retirement at age {{ retirement_age }}</p>
        </div>
        {% endif %}



        {% if chart_data %}
        <div class="mt-5">
            <h5 class="text-center mb-3">📉 Asset vs. Retirement Expense</h5>
            <div id="retirement-chart" style="height: 400px;"></div>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
            <script>
                const age = {{ chart_data["Age"] | tojson }};
                const assetRetirement = {{ chart_data["Asset_Retirement"] | tojson }};
                const expense = {{ chart_data["Living_Exp_Retirement"] | tojson }};
                const withdrawalRate = {{ chart_data["Withdrawal_Rate"] | tojson }};

                const chart1 = [
                    {
                        x: age,
                        y: assetRetirement,
                        type: 'scatter',
                        mode: 'lines+markers',
                        name: 'Asset – Retirement',
                        line: { color: 'green' },
                        yaxis: 'y1'
                    },
                    {
                        x: age,
                        y: expense,
                        type: 'scatter',
                        mode: 'lines+markers',
                        name: 'Living Exp. – Retirement',
                        line: { color: 'red' },
                        yaxis: 'y1'
                    },
                    {
                        x: age,
                        y: withdrawalRate,
                        type: 'scatter',
                        mode: 'lines+markers',
                        name: 'Withdrawal Rate',
                        line: { color: 'gray', dash: 'dot' },
                        yaxis: 'y2'
                    }
                ];

                const layout1 = {
                    margin: { t: 30 },
                    xaxis: { title: "Age" },
                    yaxis: {
                        title: "Amount ($)",
                        tickprefix: "$",
                        separatethousands: true,
                        side: 'left',
                        showgrid: true
                    },
                    yaxis2: {
                        title: "Withdrawal Rate (%)",
                        overlaying: 'y',
                        side: 'right',
                        tickformat: '.1%',
                        showgrid: false
                    },
                    legend: { orientation: "h", x: 0.1, y: -0.2 }
                };

                Plotly.newPlot("retirement-chart", chart1, layout1, { responsive: true });
            </script>
        </div>
        {% endif %}

        {% if monte_carlo_data %}
        <div class="mt-5">
            <h5 class="text-center mb-3">🎲 Monte Carlo Simulation: Retirement Asset Range</h5>
            <div id="monte-carlo-chart" style="height: 400px;"></div>
            <script>
                const mc_age = {{ monte_carlo_data["Age"] | tojson }};
                const mc_p10 = {{ monte_carlo_data["Percentile_10"] | tojson }};
                const mc_p50 = {{ monte_carlo_data["Percentile_50"] | tojson }};
                const mc_p90 = {{ monte_carlo_data["Percentile_90"] | tojson }};

                const chart2 = [
                    {
                        x: mc_age,
                        y: mc_p10,
                        fill: 'none',
                        line: { color: 'rgba(0,100,200,0.2)', width: 0 },
                        name: '10th Percentile',
                        showlegend: false
                    },
                    {
                        x: mc_age,
                        y: mc_p90,
                        fill: 'tonexty',
                        fillcolor: 'rgba(0,100,200,0.2)',
                        line: { color: 'rgba(0,100,200,0.2)', width: 0 },
                        name: '90th Percentile',
                        showlegend: false
                    },
                    {
                        x: mc_age,
                        y: mc_p50,
                        mode: 'lines+markers',
                        name: 'Median',
                        line: { color: 'blue' }
                    }
                ];

                const layout2 = {
                    margin: { t: 30 },
                    xaxis: { title: "Age" },
                    yaxis: {
                        title: "Projected Assets ($)",
                        tickprefix: "$",
                        separatethousands: true
                    },
                    legend: { orientation: "h", x: 0.1, y: -0.2 }
                };

                Plotly.newPlot("monte-carlo-chart", chart2, layout2, { responsive: true });
            </script>
        </div>
        {% endif %}


        {% if depletion_stats %}
        <div class="mt-4">
            <h6>⚠️ Depletion Risk Summary (Based on 1,000 Monte Carlo Simulations)</h6>
            <ul class="mb-1">
                <li><strong>{{ (depletion_stats.age_75 * 100) | round(1) }}%</strong> chance of running out of money by <strong>age 75</strong></li>
                <li><strong>{{ (depletion_stats.age_85 * 100) | round(1) }}%</strong> chance by <strong>age 85</strong></li>
                <li><strong>{{ (depletion_stats.age_90 * 100) | round(1) }}%</strong> chance by <strong>age 90</strong></li>
            </ul>
            <p class="text-muted small">
                Assumes current savings, asset, CPP, expenses, and retirement age remain fixed.
                Market returns and inflation are randomly varied in each simulation.
            </p>
        </div>
        {% endif %}



<!-- ==== Live What-If (beta) – append-only block ==== -->
<link rel="preconnect" href="https://cdn.jsdelivr.net">
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3"></script>

<div class="card mt-4">
  <div class="card-body">
    <h5 class="card-title mb-3">⚡ Live What-If</h5>

    <!-- Top quick controls -->
    <div class="row g-3">
      <div class="col-md-4">
        <label class="form-label">Retirement Age:
          <span id="lw_age_val" class="fw-semibold">65</span>
        </label>
        <input type="range" id="lw_ret_age" class="form-range" min="55" max="75" step="1" value="65">
      </div>

      <div class="col-md-4">
        <label class="form-label">Monthly Expense ($/mo):
          <span id="lw_exp_val" class="fw-semibold">6,900</span>
        </label>
        <input type="range" id="lw_expense_mo" class="form-range" min="2000" max="20000" step="50" value="6900">
      </div>

      <div class="col-md-4">
        <label class="form-label">Post-Ret Return (%):
          <span id="lw_post_val" class="fw-semibold">6.0</span>
        </label>
        <input type="range" id="lw_mu_post" class="form-range" min="0" max="12" step="0.1" value="6.0">
      </div>
    </div>

    <!-- Reset toolbar -->
    <div class="d-flex align-items-center gap-2 mt-2">
      <button id="lw_reset" type="button" class="btn btn-sm btn-outline-secondary">
        ⟲ Reset to form values
      </button>
      <span class="text-muted small">Restore sliders from the current inputs above.</span>
    </div>

    <!-- More controls -->
    <details class="mt-3">
      <summary class="h6 mb-2">More controls</summary>
      <div class="row g-3">
        <div class="col-md-4">
          <label class="form-label">Pre-Ret Return (%):
            <span id="lw_pre_val" class="fw-semibold">8.0</span>
          </label>
          <input type="range" id="lw_mu_pre" class="form-range" min="0" max="12" step="0.1" value="8.0">
        </div>

        <div class="col-md-4">
          <label class="form-label">Monthly Savings ($/mo):
            <span id="lw_save_val" class="fw-semibold">7,100</span>
          </label>
          <input type="range" id="lw_saving_mo" class="form-range" min="0" max="20000" step="100" value="7100">
        </div>

        <div class="col-md-4">
          <label class="form-label">Current Assets ($):
            <span id="lw_assets_val" class="fw-semibold">1,000,000</span>
          </label>
          <input type="range" id="lw_assets" class="form-range" min="0" max="5000000" step="50000" value="1000000">
        </div>

        <div class="col-md-4">
          <label class="form-label">Income Tax Rate (%):
            <span id="lw_tax_val" class="fw-semibold">12.0</span>
          </label>
          <input type="range" id="lw_tax" class="form-range" min="0" max="50" step="0.5" value="12">
        </div>

        <div class="col-md-4">
          <label class="form-label">Inflation Rate (%):
            <span id="lw_infl_val" class="fw-semibold">2.0</span>
          </label>
          <input type="range" id="lw_infl" class="form-range" min="0" max="10" step="0.1" value="2.0">
        </div>

        <div class="col-md-4">
          <label class="form-label">Expected Lifespan (Age):
            <span id="lw_life_val" class="fw-semibold">84</span>
          </label>
          <input type="range" id="lw_life" class="form-range" min="70" max="105" step="1" value="84">
        </div>
      </div>
    </details>

    <canvas id="lw_assets_chart" class="mt-4"></canvas>

    <!-- 🧭 Strategy Coach (beta) -->
    <div class="card mt-3">
      <div class="card-body">
        <h6 class="mb-2">🧭 Strategy Coach (beta)</h6>
        <div id="coach_area" class="vstack gap-2"></div>
      </div>
    </div>
  </div>
</div>

<script>
(function () {
  // Sliders + value spans
  const elAge   = document.getElementById('lw_ret_age');
  const elExpMo = document.getElementById('lw_expense_mo');
  const elPost  = document.getElementById('lw_mu_post');

  const elPre   = document.getElementById('lw_mu_pre');
  const elSaveMo= document.getElementById('lw_saving_mo');
  const elAssets= document.getElementById('lw_assets');
  const elTax   = document.getElementById('lw_tax');
  const elInfl  = document.getElementById('lw_infl');
  const elLife  = document.getElementById('lw_life');

  const ageVal   = document.getElementById('lw_age_val');
  const expVal   = document.getElementById('lw_exp_val');
  const postVal  = document.getElementById('lw_post_val');
  const preVal   = document.getElementById('lw_pre_val');
  const saveVal  = document.getElementById('lw_save_val');
  const assetsVal= document.getElementById('lw_assets_val');
  const taxVal   = document.getElementById('lw_tax_val');
  const inflVal  = document.getElementById('lw_infl_val');
  const lifeVal  = document.getElementById('lw_life_val');

  // 👉 stash for coach-suggested goals (not persisted)
  window.__coach_goals = window.__coach_goals || [];

  // 👉 CSRF token for JSON POST (safe if undefined)
  const CSRF = "{{ csrf_token() if csrf_token is defined else '' }}";

  // ---- helpers to read the existing form ----
  const $ = (sel, root=document) => root.querySelector(sel);

  function findByLabelText(text) {
    const labels = Array.from(document.querySelectorAll('label'));
    const t = (text || '').toLowerCase();
    const lab = labels.find(lb => (lb.textContent || '').toLowerCase().includes(t));
    if (!lab) return null;
    if (lab.control) return lab.control;
    const forId = lab.getAttribute('for');
    if (forId) { const el = document.getElementById(forId); if (el) return el; }
    const col = lab.closest('.col-md-4, .col, .form-group, .mb-3') || lab.parentElement;
    return col ? col.querySelector('input,select,textarea') : null;
  }

  function findInput({ids=[], names=[], labelIncludes=[]}) {
    for (const id of ids)   { const el = document.getElementById(id); if (el) return el; }
    for (const nm of names) { const el = $(`[name="${nm}"]`);         if (el) return el; }
    for (const txt of labelIncludes) { const el = findByLabelText(txt); if (el) return el; }
    return null;
  }

  function numFrom(el) {
    if (!el) return NaN;
    if (el.tagName === 'SELECT') {
      const opt = el.options[el.selectedIndex];
      const txt = (opt && opt.text) || el.value || '';
      const m = txt.toString().match(/[\d.]+/);
      return m ? Number(m[0]) : NaN;
    }
    const raw = (el.value ?? el.textContent ?? '').toString();
    return Number(raw.replace(/[^\d.\-]/g, ''));
  }
  const toDec = x => (Number.isFinite(x) ? x/100 : NaN);
  const nz = (v, f) => (Number.isFinite(v) ? v : f);
  const fmt = x => Number(x).toLocaleString();

  // ---- snapshot the whole form (includes CPP from Extended-Year fields) ----
  function gatherForm() {
    const current_age     = nz(numFrom(findInput({labelIncludes:['Current Age'], names:['current_age']})), 53);
    const retirement_age  = nz(numFrom(findInput({labelIncludes:['Retirement Age'], names:['retirement_age']})), 65);

    // Lifespan (needed for fallback)
    const life_expectancy = nz(numFrom(findInput({labelIncludes:['Expected Lifespan'], names:['expected_lifespan']})), 90);

    // Map Extended-Year to CPP window: start = From, end = To - 1 (inclusive)
    const ext_from = nz(
      numFrom(findInput({
        ids:['extended_year_from_age','extended_from_age'],
        names:['extended_year_from_age'],
        labelIncludes:['Extended Year From']
      })), retirement_age
    );

    const ext_to_raw = nz(
      numFrom(findInput({
        ids:['extended_year_to_age','extended_to_age'],
        names:['extended_year_to_age'],
        labelIncludes:['Extended Year To']
      })), life_expectancy + 1
    );

    const cpp_start_age = ext_from;
    const cpp_end_age   = Math.max(ext_from, (Number.isFinite(ext_to_raw) ? (ext_to_raw - 1) : life_expectancy));

    const msav            = nz(numFrom(findInput({labelIncludes:['Monthly Savings'], names:['monthly_savings']})), 0);
    const annual_saving   = msav * 12;

    const inc_rate_pct    = nz(numFrom(findInput({labelIncludes:['Annual Saving Increase Rate'], names:['annual_saving_increase_rate']})), 0);
    const saving_increase_rate = toDec(inc_rate_pct);

    const pre_ret_pct     = nz(numFrom(findInput({labelIncludes:['Pre-Retire Return Rate'], names:['pre_retire_return_rate']})), 6);
    const post_ret_pct    = nz(numFrom(findInput({labelIncludes:['Post-Retire Return Rate'], names:['post_retire_return_rate']})), 4.5);
    const return_rate     = toDec(pre_ret_pct);
    const return_rate_after = toDec(post_ret_pct);

    const mexp            = nz(numFrom(findInput({labelIncludes:['Monthly Living Expense'], names:['monthly_living_expense','living_expense']})), 0);
    const annual_expense  = mexp * 12;

    const tax_pct         = nz(numFrom(findInput({labelIncludes:['Income Tax Rate'], names:['income_tax_rate']})), 15);
    const inflation_pct   = nz(numFrom(findInput({labelIncludes:['Inflation Rate'], names:['inflation_rate']})), 2.5);
    const income_tax_rate = toDec(tax_pct);
    const inflation_rate  = toDec(inflation_pct);

    const current_assets  = nz(numFrom(findInput({labelIncludes:['Current Assets'], names:['current_assets']})), 0);
    const cpp_monthly     = nz(numFrom(findInput({labelIncludes:['Living Expense Support','CPP'], names:['cpp_monthly','living_expense_support']})), 0);

    const ret_std_pct     = nz(numFrom(findInput({labelIncludes:['Return Std Dev'], names:['return_std_dev']})), 8);
    const infl_std_pct    = nz(numFrom(findInput({labelIncludes:['Inflation Std Dev'], names:['inflation_std_dev']})), 0.5);
    const return_std      = toDec(ret_std_pct);
    const inflation_std   = toDec(infl_std_pct);

    // optional liquidations (1..3)
    function liq(n){
      const amt = nz(numFrom(findInput({labelIncludes:[`Asset Liquidation ${n}`], names:[`asset_liquidation_${n}`]})), 0);
      const age = nz(numFrom(findInput({labelIncludes:[`Asset Liquidation Age ${n}`], names:[`asset_liquidation_age_${n}`]})), NaN);
      return (amt>0 && Number.isFinite(age)) ? {amount: amt, age: Math.round(age)} : null;
    }
    const asset_liquidations = [liq(1), liq(2), liq(3)].filter(Boolean);

    return {
      current_age,
      retirement_age,
      annual_saving,
      saving_increase_rate,
      current_assets,
      return_rate,
      return_rate_after,
      annual_expense,
      cpp_monthly,
      cpp_start_age,
      cpp_end_age,
      asset_liquidations,
      inflation_rate,
      life_expectancy,
      income_tax_rate,

      // MC mirrors deterministic
      return_mean: return_rate,
      return_mean_after: return_rate_after,
      return_std,
      inflation_mean: inflation_rate,
      inflation_std,
    };
  }

  // ---- Goals → asset_liquidations (client-side) ----
  function goalsToLiquidations(goals, base){
    const out = [];
    const infl = base.inflation_rate || 0;
    const currAge = base.current_age || 0;
    for (const g of goals || []) {
      if (!g || g.enabled === false) continue;
      let ages = [];
      if (g.recurrence === 'once') {
        ages = [g.start_age];
      } else if (g.recurrence === 'years') {
        const n = Math.max(1, g.years || 1);
        ages = Array.from({length:n}, (_,i)=>g.start_age + i);
      } else if (g.recurrence === 'annual') {
        const end = (g.end_age ?? g.start_age);
        const n = Math.max(0, end - g.start_age + 1);
        ages = Array.from({length:n}, (_,i)=>g.start_age + i);
      }
      for (const age of ages) {
        const yrs  = Math.max(0, age - currAge);
        const amt  = g.amount * (g.inflation_linked ? Math.pow(1 + infl, yrs) : 1);
        // Keep your current sign convention (works with your calculators)
        out.push({ age: Math.round(age), amount: g.is_expense ? -amt : amt });
      }
    }
    return out;
  }

  // ---- initialize sliders from the form values ----
  const base = gatherForm();
  setSlidersFromForm(base);
  updateLabelsFromSliders();

  // ---- Chart ----
  const ctx = document.getElementById('lw_assets_chart').getContext('2d');
  const chart = new Chart(ctx, {
    type: 'line',
    data: { labels: [], datasets: [
      { label: 'Deterministic', data: [] },
      { label: 'MC P10', data: [] },
      { label: 'MC Median', data: [] },
      { label: 'MC P90', data: [] },
    ]},
    options: {
      responsive: true,
      animation: false,
      interaction: { mode: 'index', intersect: false },
      scales: { x: { title: { display: true, text: 'Age' } },
               y: { ticks: { callback: v => Number(v).toLocaleString() } } }
    }
  });

  // Helpers to write sliders/labels from a form snapshot
  function setSlidersFromForm(f) {
    elAge.value     = f.retirement_age;
    elExpMo.value   = Math.round((f.annual_expense/12) / 50) * 50;
    elPost.value    = Math.round((f.return_rate_after * 100) * 10) / 10;

    elPre.value     = Math.round((f.return_rate * 100) * 10) / 10;
    elSaveMo.value  = Math.round((f.annual_saving/12) / 100) * 100;
    elAssets.value  = f.current_assets;
    elTax.value     = Math.round((f.income_tax_rate * 100) * 2) / 2;
    elInfl.value    = Math.round((f.inflation_rate * 100) * 10) / 10;
    elLife.value    = f.life_expectancy;
  }
  function updateLabelsFromSliders() {
    ageVal.textContent     = elAge.value;
    expVal.textContent     = fmt(elExpMo.value);
    postVal.textContent    = (+elPost.value).toFixed(1);
    preVal.textContent     = (+elPre.value).toFixed(1);
    saveVal.textContent    = fmt(elSaveMo.value);
    assetsVal.textContent  = fmt(elAssets.value);
    taxVal.textContent     = (+elTax.value).toFixed(1);
    inflVal.textContent    = (+elInfl.value).toFixed(1);
    lifeVal.textContent    = elLife.value;
  }

  // send ALL form values + slider overrides
  let lastForm = null;
  function collectParams() {
    const form = gatherForm();

    // slider overrides
    form.retirement_age     = +elAge.value;
    form.annual_expense     = (+elExpMo.value) * 12;
    form.return_rate_after  = (+elPost.value) / 100;
    form.return_mean_after  = form.return_rate_after;

    form.return_rate        = (+elPre.value) / 100;
    form.return_mean        = form.return_rate;

    form.annual_saving      = (+elSaveMo.value) * 12;
    form.current_assets     = +elAssets.value;
    form.income_tax_rate    = (+elTax.value) / 100;
    form.inflation_rate     = (+elInfl.value) / 100;
    form.inflation_mean     = form.inflation_rate;
    form.life_expectancy    = +elLife.value;

    form.num_simulations    = 2000;

    // 🔗 attach goals (table + coach) and merge into asset_liquidations
    const goalsTable = (window.GoalsModule?.current() || []);
    const coachGoals = (window.__coach_goals || []);
    const allGoals   = goalsTable.concat(coachGoals);

    form.goal_events = allGoals;  // send for server visibility/debug
    const fromGoals  = goalsToLiquidations(allGoals, form);
    form.asset_liquidations = [...(form.asset_liquidations || []), ...fromGoals];

    // reflect labels
    updateLabelsFromSliders();

    lastForm = form;
    return form;
  }

  function debounce(fn, ms){ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a), ms); }; }

  // ---- Coach UI helpers ----
  function applyPatch(patch){
    if (!patch) return;

    if (patch.retirement_age != null) elAge.value = +patch.retirement_age;
    if (patch.annual_expense != null) elExpMo.value = Math.max(0, Math.round((+patch.annual_expense)/12/50)*50);
    if (patch.return_rate != null) elPre.value = (+patch.return_rate*100).toFixed(1);
    if (patch.return_rate_after != null) elPost.value = (+patch.return_rate_after*100).toFixed(1);

    if (Array.isArray(patch.goal_events) && patch.goal_events.length){
      window.__coach_goals = (window.__coach_goals || []).concat(patch.goal_events);
    }

    updateLabelsFromSliders();
    send();
  }

  function renderCoach(list){
    const area = document.getElementById('coach_area');
    if (!area) return;
    area.innerHTML = '';
    (list || []).forEach(s => {
      const row = document.createElement('div');
      if (s.type === 'status') {
        row.className = 'alert alert-secondary py-2 mb-0';
        row.textContent = s.detail || s.title || 'Status';
      } else {
        row.className = 'd-flex justify-content-between align-items-start border rounded p-2';
        row.innerHTML = `
          <div>
            <div class="fw-semibold">${s.title || 'Suggestion'}</div>
            <div class="text-muted small">${s.why || ''}</div>
          </div>
          <div class="d-flex gap-2">
            <button type="button" class="btn btn-sm btn-primary">Try it</button>
          </div>`;
        row.querySelector('button').addEventListener('click', () => applyPatch(s.patch));
      }
      area.appendChild(row);
    });
  }

  async function ping() {
    const payload = collectParams();
    const url = "{{ url_for('projects.live_update') }}";  /* change to live_whatif.live_update if you used the fallback blueprint */
    try {
      const res = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          ...(CSRF ? {"X-CSRFToken": CSRF} : {})
        },
        body: JSON.stringify(payload)
      });
      if (!res.ok) { console.error("live-update failed", res.status, await res.text()); return; }
      const data = await res.json();

      if (data.debug) {
        console.groupCollapsed("LIVE DEBUG");
        console.table(data.debug.used_params || {});
        console.log("Deterministic last:", data.debug?.derived?.deterministic_last);
        console.log("SENT PAYLOAD", payload);
        console.groupEnd();
      }

      const n = (data.p50?.length) || (data.deterministic?.length) || 0;
      const startAge = (lastForm?.current_age) ?? payload.current_age ?? 0;
      chart.data.labels = Array.from({ length: n }, (_, i) => startAge + i);

      chart.data.datasets[0].data = data.deterministic || [];
      chart.data.datasets[1].data = data.p10 || [];
      chart.data.datasets[2].data = data.p50 || [];
      chart.data.datasets[3].data = data.p90 || [];
      chart.update('none');

      // 🧭 render Coach suggestions
      renderCoach(data.coach || []);
    } catch (err) {
      console.error("live-update error", err);
    }
  }

  const send = debounce(ping, 120);

  [elAge, elExpMo, elPost, elPre, elSaveMo, elAssets, elTax, elInfl, elLife]
    .forEach(el => {
      el.addEventListener('input', send);
      el.addEventListener('change', send);
    });

  // Make goal edits trigger a live update too (works if GoalsModule is already loaded)
  if (window.GoalsModule?.onChange) {
    window.GoalsModule.onChange(() => { send(); });
  }

  // --- RESET: snap sliders back to whatever the main form currently holds
  document.getElementById('lw_reset').addEventListener('click', () => {
    const f = gatherForm();
    setSlidersFromForm(f);
    updateLabelsFromSliders();
    ping();
  });

  console.log("Live What-If ready (form-derived)");
  window.__liveTest = { ping, collectParams };

  // initial draw
  ping();
})();
</script>

<!-- ==== Goals (modular, optional) ==== -->
<div class="card mt-3">
  <div class="card-body">
    <details open>
      <summary class="h6 mb-3">🎯 Goals (beta) — extra expenses or inflows</summary>

      <div class="row g-2 align-items-end">
        <div class="col-md-3">
          <label class="form-label">Name</label>
          <input id="g_name" type="text" class="form-control" placeholder="college">
        </div>

        <div class="col-md-3">
          <label class="form-label">Type</label>
          <select id="g_type" class="form-select">
            <option value="expense" selected>Expense (outflow)</option>
            <option value="inflow">Inflow</option>
          </select>
        </div>

        <div class="col-md-2">
          <label class="form-label">Amount ($, today)</label>
          <input id="g_amt" type="number" class="form-control" value="30000" min="0" step="100">
        </div>

        <div class="col-md-2">
          <label class="form-label">Start age</label>
          <input id="g_age" type="number" class="form-control" value="60" min="0" step="1">
        </div>

        <div class="col-md-2">
          <label class="form-label">Recurrence</label>
          <select id="g_rec" class="form-select">
            <option value="once" selected>Once (at start age)</option>
            <option value="annual">Annual (start→end)</option>
            <option value="years">For N years</option>
          </select>
        </div>

        <div class="col-md-2 d-none" id="g_years_wrap">
          <label class="form-label">Years</label>
          <input id="g_years" type="number" class="form-control" value="4" min="1" step="1">
        </div>

        <div class="col-md-2 d-none" id="g_endage_wrap">
          <label class="form-label">End age</label>
          <input id="g_endage" type="number" class="form-control" value="84" min="0" step="1">
        </div>

        <div class="col-md-3">
          <div class="form-check mt-4">
            <input class="form-check-input" type="checkbox" id="g_infl" checked>
            <label class="form-check-label" for="g_infl">Inflation linked</label>
          </div>
        </div>

        <div class="col-md-3">
          <button id="goal_add" type="button" class="btn btn-primary mt-3">+ Add Goal</button>
        </div>
      </div>

      <hr class="my-3">

      <div class="table-responsive">
        <table class="table table-sm align-middle">
          <thead>
            <tr>
              <th style="width:70px;">Enabled</th>
              <th>Name</th>
              <th>Type</th>
              <th>When</th>
              <th class="text-end">Amount</th>
              <th>Infl.</th>
              <th style="width:70px;"></th>
            </tr>
          </thead>
          <tbody id="goal_rows"></tbody>
        </table>
      </div>

<script id="goals-module">
(() => {
  // ---- grab elements
  const rowsEl   = document.getElementById('goal_rows');
  const addBtn   = document.getElementById('goal_add');

  const nameEl   = document.getElementById('g_name');
  const typeEl   = document.getElementById('g_type');     // expense | inflow
  const amtEl    = document.getElementById('g_amt');
  const ageEl    = document.getElementById('g_age');
  const recEl    = document.getElementById('g_rec');      // once | annual | years
  const yearsWrap= document.getElementById('g_years_wrap');
  const yearsEl  = document.getElementById('g_years');
  const endWrap  = document.getElementById('g_endage_wrap');
  const endEl    = document.getElementById('g_endage');
  const inflEl   = document.getElementById('g_infl');

  // ---- tiny state + pub/sub
  let rows = [];
  const subs = new Set();
  const notify = () => subs.forEach(fn => { try { fn(); } catch {} });
  const onChange = fn => (subs.add(fn), () => subs.delete(fn));
  const current = () => rows.filter(r => r.enabled !== false);

  // ---- helpers
  function esc(s){ return (s ?? '').toString().replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m])); }
  function whenText(r){
    if (r.recurrence === 'annual') return `Age ${r.start_age}–${r.end_age ?? ''}`;
    if (r.recurrence === 'years')  return `Age ${r.start_age} × ${r.years}`;
    return `At ${r.start_age}`;
  }
  function render(){
    rowsEl.innerHTML = '';
    rows.forEach((r,i) => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td><input class="form-check-input g-en" type="checkbox" data-i="${i}" ${r.enabled !== false ? 'checked' : ''}></td>
        <td>${esc(r.name || 'Goal')}</td>
        <td>${r.is_expense ? 'Expense' : 'Inflow'}</td>
        <td>${whenText(r)}</td>
        <td class="text-end">$${(+r.amount).toLocaleString()}</td>
        <td>${r.inflation_linked ? 'Yes' : 'No'}</td>
        <td><button class="btn btn-sm btn-outline-danger g-del" data-i="${i}">×</button></td>`;
      rowsEl.appendChild(tr);
    });
  }
  function readNew(){
    return {
      enabled: true,
      name: (nameEl.value || 'Goal').trim(),
      is_expense: (typeEl.value !== 'inflow'),
      amount: +amtEl.value || 0,
      start_age: parseInt(ageEl.value, 10) || 0,
      recurrence: recEl.value,
      years: recEl.value === 'years'  ? (parseInt(yearsEl.value, 10) || 1) : undefined,
      end_age: recEl.value === 'annual' ? (parseInt(endEl.value, 10) || undefined) : undefined,
      inflation_linked: !!inflEl.checked
    };
  }

  // ---- UI wiring
  recEl.addEventListener('change', () => {
    yearsWrap.classList.toggle('d-none', recEl.value !== 'years');
    endWrap.classList.toggle('d-none',   recEl.value !== 'annual');
  });

  addBtn.addEventListener('click', () => {
    rows.push(readNew());
    render();
    notify();
  });

  rowsEl.addEventListener('click', e => {
    const i = e.target.getAttribute('data-i');
    if (i == null) return;
    if (e.target.classList.contains('g-del')) {
      rows.splice(+i, 1);
      render();
      notify();
    }
  });
  rowsEl.addEventListener('change', e => {
    if (e.target.classList.contains('g-en')) {
      const i = +e.target.getAttribute('data-i');
      rows[i].enabled = e.target.checked;
      notify();
    }
  });

  // ---- expose API
  window.GoalsModule = { current, onChange };

  // ---- late-bind Live What-If recalc (in case Live block ran earlier)
  try {
    if (window.__liveTest?.ping) {
      let t;
      onChange(() => {
        clearTimeout(t);
        t = setTimeout(() => window.__liveTest.ping(), 120);
      });
    }
  } catch {}
})();
</script>

      <p class="text-muted small mb-0">
        Note: For MVP, goals (including any Coach suggestions you "Try") are merged client-side into asset liquidations (post-tax) before the live update call. They don’t alter Living Expense (for taxes) yet—keeping the core calculators untouched.
      </p>
    </details>
  </div>
</div>











{% if sensitivities %}
<div class="mt-4">
  <h5 class="text-center mb-3">🔍 Sensitivity Analysis</h5>

  <div class="row g-3">
    <!-- Table -->
    <div class="col-md-6">
      <div class="table-responsive">
        <table class="table table-sm table-bordered text-center">
          <thead class="table-light">
            <tr>
              <th>Parameter</th>
              <th>Elasticity<br>(%Δ Output / %Δ Input)</th>
              <th>Dollar Impact ($)</th>
            </tr>
          </thead>
          <tbody>
            {% for var, vals in sensitivities.items() %}
              <tr>
                <td>
                  {% if var == 'return_rate' %}
                    Pre-Retire Return Rate
                  {% elif var == 'return_rate_after' %}
                    Post-Retire Return Rate
                  {% elif var == 'retirement_age' %}
                    Retirement Age <span class="badge bg-secondary ms-1">separate scale</span>
                  {% else %}
                    {{ var.replace('_', ' ').title() }}
                  {% endif %}
                </td>
                <td>{{ "{:.2f}".format(vals.sensitivity_pct) }}%</td>
                <td>${{ "{:,.0f}".format(vals.dollar_impact) }}</td>
              </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
    </div>

    <!-- Charts -->
    <div class="col-md-6">
      <!-- Core inputs -->
      <div class="card mb-3">
        <div class="card-header">Dollar Impact – Core Inputs</div>
        <div class="card-body">
          <div style="width:100%; height:300px;">
            <canvas id="dollarImpactCoreChart"></canvas>
          </div>
        </div>
      </div>

      <!-- Retirement Age (own scale) -->
      <div class="card">
        <div class="card-header">Retirement Age – Dollar Impact (Own Scale)</div>
        <div class="card-body">
          <div style="width:100%; height:150px;">
            <canvas id="dollarImpactRAChart"></canvas>
          </div>
          {% if sensitivities.get('retirement_age') %}
            <div class="text-muted small mt-2">
              +1% change in <em>Retirement Age</em> ⇒
              ${{ "{:,.0f}".format(sensitivities['retirement_age'].dollar_impact) }}
              (Elasticity: {{ "{:.0f}".format(sensitivities['retirement_age'].sensitivity_pct) }}%)
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  </div>

  <div class="mt-3">
    <p><strong>Elasticity</strong> shows the % change in <em>Final Assets</em> from a 1% increase in each input.</p>
    <p><strong>Dollar Impact</strong> shows the absolute change in <em>Final Assets</em> for that same 1% increase.</p>
  </div>
</div>

<!-- Chart.js for sensitivity bars -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  (function(){
    // Build Core vs RA arrays from the server-side sensitivities
    const coreLabels = [];
    const coreData   = [];
    let raValue = null;

    {% for var, vals in sensitivities.items() %}
      {% if var != 'retirement_age' %}
        {% if var == 'current_assets' %}
          coreLabels.push('Current Assets');
        {% elif var == 'return_rate' %}
          coreLabels.push('Pre-Retire Return Rate');
        {% elif var == 'return_rate_after' %}
          coreLabels.push('Post-Retire Return Rate');
        {% elif var == 'annual_saving' %}
          coreLabels.push('Annual Saving');
        {% elif var == 'annual_expense' %}
          coreLabels.push('Annual Expense');
        {% elif var == 'saving_increase_rate' %}
          coreLabels.push('Saving Increase Rate');
        {% elif var == 'inflation_rate' %}
          coreLabels.push('Inflation Rate');
        {% elif var == 'income_tax_rate' %}
          coreLabels.push('Income Tax Rate');
        {% else %}
          coreLabels.push('{{ var.replace("_", " ").title() }}');
        {% endif %}
        coreData.push({{ vals.dollar_impact }});
      {% else %}
        raValue = {{ sensitivities['retirement_age'].dollar_impact }};
      {% endif %}
    {% endfor %}

    // Common tick style for readability
    const tickStyle = {
      color: '#111',
      font: { size: 12, weight: 'bold' }
    };

    // ----- Core inputs chart -----
    if (coreLabels.length) {
      const maxImpact = Math.max(...coreData.map(v => Math.abs(v))) || 1;

      new Chart(document.getElementById('dollarImpactCoreChart').getContext('2d'), {
        type: 'bar',
        data: {
          labels: coreLabels,
          datasets: [{
            label: 'Dollar Impact',
            data: coreData,
            backgroundColor: '#4e73df'
          }]
        },
        options: {
          indexAxis: 'y',
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: {
              min: -maxImpact,
              max:  maxImpact,
              ticks: {
                ...tickStyle,
                callback: value => '$' + Number(value).toLocaleString()
              },
              title: { display: true, text: 'Dollar Impact ($)', color: '#111', font: { weight: 'bold' } }
            },
            y: { ticks: tickStyle }
          },
          plugins: {
            legend: { display: false },
            tooltip: {
              callbacks: {
                label: ctx => '$' + Number(ctx.parsed.x).toLocaleString()
              }
            }
          }
        }
      });
    }

    // ----- Retirement Age chart (own scale) -----
    if (raValue !== null) {
      const raAbs = Math.abs(raValue);
      const raMax = raAbs === 0 ? 1 : raAbs * 1.1; // small headroom

      new Chart(document.getElementById('dollarImpactRAChart').getContext('2d'), {
        type: 'bar',
        data: {
          labels: ['Retirement Age'],
          datasets: [{
            label: 'Dollar Impact',
            data: [raValue],
            backgroundColor: '#7e57c2'
          }]
        },
        options: {
          indexAxis: 'y',
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: {
              min: -raMax,
              max:  raMax,
              ticks: {
                ...tickStyle,
                callback: value => '$' + Number(value).toLocaleString()
              },
              title: { display: true, text: 'Dollar Impact ($)', color: '#111', font: { weight: 'bold' } }
            },
            y: { ticks: tickStyle }
          },
          plugins: {
            legend: { display: false },
            tooltip: {
              callbacks: {
                label: ctx => '$' + Number(ctx.parsed.x).toLocaleString()
              }
            }
          }
        }
      });
    }
  })();
</script>
{% endif %}




<!-- ==== Compare Saved Scenarios (plain POST) ==== -->
<!-- ==== Compare Saved Scenarios (plain POST) ==== -->
<hr class="my-4">
<h5 class="text-center mb-3">🔄 Compare Saved Scenarios</h5>

<form id="compare-form" class="row g-3 align-items-end" method="POST" action="{{ url_for('projects.compare_retirement') }}">
  {% if csrf_token is defined %}
    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
  {% endif %}

  <div class="col-md-6">
    <label for="scenario_a" class="form-label">Scenario A</label>
    <select id="scenario_a" name="scenario_a" class="form-select" required>
      <option value="">-- Select Scenario A --</option>
      {% for s in saved_scenarios %}
        <option value="{{ s.id }}">{{ s.scenario_name }}</option>
      {% endfor %}
    </select>
  </div>

  <div class="col-md-6">
    <label for="scenario_b" class="form-label">Scenario B (optional)</label>
    <select id="scenario_b" name="scenario_b" class="form-select">
      <option value="">-- (None) --</option>
      {% for s in saved_scenarios %}
        <option value="{{ s.id }}">{{ s.scenario_name }}</option>
      {% endfor %}
    </select>
  </div>

  <div class="col-12 text-center">
    <button type="submit" class="btn btn-warning px-4">Compare</button>
  </div>
</form>

<!-- Compare block -->
<style>
  /* Clamp chart heights so they don't balloon */
  #sens-core-chart, #sens-ra-chart { max-height: 320px; }
  #sens-ra-chart { max-height: 110px; }
</style>

<div id="compare-block" class="mt-5 d-none">
  <hr class="my-4">
  <h5 class="text-center mb-3" id="compare-title">🔄 Compare</h5>

  <!-- MC (Plotly) -->
  <div class="card mb-4">
    <div class="card-header">Monte Carlo Simulation</div>
    <div class="card-body">
      <div id="mc-compare-plot" style="height:400px;"></div>
    </div>
  </div>

  <!-- Sensitivity: Core -->
  <div id="sens-core-card" class="card mb-4 d-none">
    <div class="card-header">Sensitivity – Dollar Impact (Core Inputs)</div>
    <div class="card-body">
      <canvas id="sens-core-chart" style="height:320px;"></canvas>
    </div>
  </div>

  <!-- Sensitivity: Retirement Age (own scale) -->
  <div id="sens-ra-card" class="card mb-4 d-none">
    <div class="card-header">Retirement Age – Dollar Impact (Own Scale)</div>
    <div class="card-body">
      <canvas id="sens-ra-chart" style="height:110px;"></canvas>
      <div id="sens-ra-note" class="text-muted small mt-2"></div>
    </div>
  </div>
</div>

<!-- libs -->
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
(function(){
  const form = document.getElementById('compare-form');
  if (!form) return;

  let sensChartCore = null;
  let sensChartRA   = null;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const bId = document.getElementById('scenario_b').value || '';

    // A-only: clone MC; hide sensitivity blocks
    if (!bId) {
      const src = document.getElementById('monte-carlo-chart');
      if (!src || !src.data) { alert('Main MC chart not found on page.'); return; }
      const traces = JSON.parse(JSON.stringify(src.data));
      const layout = JSON.parse(JSON.stringify(src.layout || {}));
      ensureLayout(layout);
      showCompareBlock();
      showTitle(`🔄 Compare: ${document.querySelector('#scenario_a option:checked').textContent}`);
      Plotly.react('mc-compare-plot', traces, layout, { responsive: true });
      hideSensitivity();
      return;
    }

    // A+B: call backend
    const fd = new FormData(form);
    const res = await fetch('{{ url_for("projects.compare_retirement") }}', {
      method: 'POST',
      body: fd,
      credentials: 'same-origin'
    });

    const ct = (res.headers.get('content-type') || '').toLowerCase();
    if (!ct.includes('application/json')) {
      const txt = await res.text();
      alert('Compare failed (non-JSON):\n' + txt.slice(0,300));
      return;
    }

    const cd = await res.json();
    if (!res.ok) { alert(cd.error || 'Compare failed.'); return; }

    renderOverlay(cd);
    renderSensitivitySplit(cd);
  });

  // ---------- MC overlay (Plotly) ----------
  function renderOverlay(cd){
    const labelA = (cd.labels && cd.labels.A) || 'Scenario A';
    const labelB = (cd.labels && cd.labels.B) || 'Scenario B';
    const ages  = (cd.mc.ages || []).map(Number);

    const A = {
      p10: (cd.mc.p10.A || []).map(Number),
      p50: (cd.mc.p50.A || []).map(Number),
      p90: (cd.mc.p90.A || []).map(Number)
    };
    const B = (cd.mc.p10.B && cd.mc.p50.B && cd.mc.p90.B) ? {
      p10: (cd.mc.p10.B || []).map(Number),
      p50: (cd.mc.p50.B || []).map(Number),
      p90: (cd.mc.p90.B || []).map(Number)
    } : null;

    const traces = [
      { x: ages, y: A.p10, fill: 'none', line: { color: 'rgba(0,100,200,0.2)', width: 0 }, hoverinfo:'skip', showlegend:false },
      { x: ages, y: A.p90, fill: 'tonexty', fillcolor: 'rgba(0,100,200,0.2)', line: { color: 'rgba(0,100,200,0.2)', width: 0 }, hoverinfo:'skip', showlegend:false },
      { x: ages, y: A.p50, mode: 'lines+markers', name: `${labelA} – Median`, line: { color: 'blue' } }
    ];

    if (B) {
      traces.push(
        { x: ages, y: B.p10, fill: 'none', line: { color: 'rgba(255,159,64,0.2)', width: 0 }, hoverinfo:'skip', showlegend:false },
        { x: ages, y: B.p90, fill: 'tonexty', fillcolor: 'rgba(255,159,64,0.2)', line: { color: 'rgba(255,159,64,0.2)', width: 0 }, hoverinfo:'skip', showlegend:false },
        { x: ages, y: B.p50, mode: 'lines+markers', name: `${labelB} – Median`, line: { color: 'orange' } }
      );
    }

    const layout = {};
    ensureLayout(layout);
    showCompareBlock();
    showTitle(B ? `🔄 Compare: ${labelA} vs ${labelB}` : `🔄 Compare: ${labelA}`);
    Plotly.react('mc-compare-plot', traces, layout, { responsive: true });
  }

  // ---------- Sensitivity (SPLIT) ----------
  function renderSensitivitySplit(cd){
    if (!cd.sens || !Array.isArray(cd.sens.vars)) {
      hideSensitivity();
      return;
    }

    const labelA = (cd.labels && cd.labels.A) || 'Scenario A';
    const labelB = (cd.labels && cd.labels.B) || null;

    const vars = cd.sens.vars.slice();
    const A    = (cd.sens.A   || []).slice();
    const B    = (cd.sens.B   || null) ? cd.sens.B.slice() : null;

    const raIdx = vars.indexOf('retirement_age');
    let raA = null, raB = null;
    if (raIdx !== -1) {
      raA = (A[raIdx] != null) ? Number(A[raIdx]) : null;
      raB = (B && B[raIdx] != null) ? Number(B[raIdx]) : null;
      vars.splice(raIdx, 1);
      A.splice(raIdx, 1);
      if (B) B.splice(raIdx, 1);
    }


    // Core labels → match table wording
    const LABELS = {
      current_assets:        'Current Assets',
      return_rate:           'Pre-Retire Return Rate',
      return_rate_after:     'Post-Retire Return Rate',
      annual_saving:         'Annual Saving',
      annual_expense:        'Annual Expense',
      saving_increase_rate:  'Saving Increase Rate',
      inflation_rate:        'Inflation Rate',
      income_tax_rate:       'Income Tax Rate',
      retirement_age:        'Retirement Age'
    };

    const coreLabels = vars.map(v => LABELS[v] ?? v.replace(/_/g, ' ').replace(/\b\w/g,c=>c.toUpperCase()));
    const coreA = A.map(Number);
    const coreB = B ? B.map(Number) : null;

    // common tick styling
    const tickStyle = { color: '#111', font: { size: 12, weight: 'bold' } };

    // Core chart
    if (coreLabels.length) {
      const maxImp = Math.max(
        ...(coreA.map(Math.abs)),
        ...(coreB ? coreB.map(Math.abs) : [0])
      ) || 1;

      const ds = [{ label: labelA, data: coreA, backgroundColor: 'rgba(54,162,235,0.55)' }];
      if (coreB) ds.push({ label: labelB, data: coreB, backgroundColor: 'rgba(255,159,64,0.55)' });

      const ctxCore = document.getElementById('sens-core-chart').getContext('2d');
      if (sensChartCore) sensChartCore.destroy();
      sensChartCore = new Chart(ctxCore, {
        type: 'bar',
        data: { labels: coreLabels, datasets: ds },
        options: {
          indexAxis: 'y',
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: {
              min: -maxImp, max: maxImp,
              title: { display: true, text: 'Dollar Impact ($)', color: '#111', font: { weight: 'bold' } },
              ticks: {
                ...tickStyle,
                callback: v => '$' + Number(v).toLocaleString()
              },
              grid: { color: 'rgba(0,0,0,0.06)' }
            },
            y: { ticks: tickStyle, grid: { color: 'rgba(0,0,0,0.03)' } }
          },
          plugins: {
            legend: { position: 'bottom' },
            tooltip: {
              callbacks: {
                label: (c) => `${c.dataset.label}: $${Number(c.parsed.x).toLocaleString()}`
              }
            }
          }
        }
      });
      document.getElementById('sens-core-card').classList.remove('d-none');
    } else {
      document.getElementById('sens-core-card').classList.add('d-none');
      if (sensChartCore) { sensChartCore.destroy(); sensChartCore = null; }
    }

    // Retirement Age (own scale)
    if (raA != null || raB != null) {
      const labels = ['Retirement Age'];
      const dsRA = [{ label: labelA, data: [raA || 0], backgroundColor: 'rgba(54,162,235,0.55)' }];
      if (raB != null) dsRA.push({ label: labelB, data: [raB], backgroundColor: 'rgba(255,159,64,0.55)' });

      const ctxRA = document.getElementById('sens-ra-chart').getContext('2d');
      if (sensChartRA) sensChartRA.destroy();
      sensChartRA = new Chart(ctxRA, {
        type: 'bar',
        data: { labels, datasets: dsRA },
        options: {
          indexAxis: 'y',
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: {
              title: { display: true, text: 'Dollar Impact ($)', color: '#111', font: { weight: 'bold' } },
              ticks: {
                ...tickStyle,
                callback: v => '$' + Number(v).toLocaleString()
              },
              grid: { color: 'rgba(0,0,0,0.06)' }
            },
            y: { ticks: tickStyle, grid: { color: 'rgba(0,0,0,0.03)' } }
          },
          plugins: {
            legend: { position: 'bottom' },
            tooltip: {
              callbacks: {
                label: (c) => `${c.dataset.label}: $${Number(c.parsed.x).toLocaleString()}`
              }
            }
          }
        }
      });

      const note = document.getElementById('sens-ra-note');
      if (raA != null) {
        note.textContent =
          `A +1% change in Retirement Age affects Final Assets by ${raA >= 0 ? '+' : ''}$${Math.abs(raA).toLocaleString()} for Scenario A`
          + (raB != null ? `; Scenario B: ${raB >= 0 ? '+' : ''}$${Math.abs(raB).toLocaleString()}.` : '.');
      } else {
        note.textContent = '';
      }

      document.getElementById('sens-ra-card').classList.remove('d-none');
    } else {
      document.getElementById('sens-ra-card').classList.add('d-none');
      if (sensChartRA) { sensChartRA.destroy(); sensChartRA = null; }
    }
  }

  // ---------- helpers ----------
  function ensureLayout(layout){
    layout.margin = { t: 30 };
    layout.xaxis = { title: 'Age' };
    layout.yaxis = layout.yaxis || {};
    layout.yaxis.title = 'Projected Assets ($)';
    layout.yaxis.tickprefix = '$';
    layout.yaxis.separatethousands = true;
    layout.yaxis.exponentformat = 'none';
    layout.legend = { orientation: 'h', x: 0.1, y: -0.2 };
  }

  function showCompareBlock(){
    document.getElementById('compare-block').classList.remove('d-none');
  }

  function showTitle(txt){
    document.getElementById('compare-title').textContent = txt;
  }

  function hideSensitivity(){
    const core = document.getElementById('sens-core-card');
    const ra   = document.getElementById('sens-ra-card');
    if (!core.classList.contains('d-none')) core.classList.add('d-none');
    if (!ra.classList.contains('d-none')) ra.classList.add('d-none');
    if (sensChartCore) { sensChartCore.destroy(); sensChartCore = null; }
    if (sensChartRA)   { sensChartRA.destroy();   sensChartRA   = null; }
  }
})();
</script>





        {% if table %}
        <div class="table-responsive mt-5">
            <h5 class="text-center mb-3">📊 Retirement Projection Table</h5>
            <table class="table table-bordered table-sm text-center align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Age</th>
                        <th>Year</th>
                        <th>Retire?</th>
                        <th>Living Exp.</th>
                        <th>CPP / Extra Income</th>
                        <th>Income Tax Payment</th>
                        <th>Living Exp. – Ret.</th>
                        <th>Asset Liquidation</th>
                        <th>Savings – Before Retire</th>
                        <th>Asset</th>
                        <th>Asset – Retirement</th>
                        <th>Investment Return</th>
                        <th>Return Rate</th>
                        <th>Withdrawal Rate</th>
                    </tr>
                </thead>
                <tbody>
                {% for row in table %}
                  <tr>
                    {% for cell in row %}
                      <td>
                        {% if cell is number %}
                          {% if loop.index0 in [11, 12] %}
                            {{ "{:.1f}%".format(cell) }}
                          {% else %}
                            {{ "{:,.0f}".format(cell) }}
                          {% endif %}
                        {% else %}
                          {{ cell }}
                        {% endif %}
                      </td>
                    {% endfor %}
                  </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
        {% endif %}
 </div>

<!-- 1) Expose login state from Flask -->
<script type="text/javascript">
  const isUserLoggedIn = {{ 'true' if current_user.is_authenticated else 'false' }};
</script>

<!-- 2) Initialize Bootstrap tooltips -->
<script>
  const tooltipTriggerList = Array.from(
    document.querySelectorAll('[data-bs-toggle="tooltip"]')
  );
  tooltipTriggerList.forEach(el => new bootstrap.Tooltip(el));
</script>

<!-- 3) Collect inputs, call save endpoint, and guard by login -->
<script>
  // Gather all the form’s inputs into a JSON object
  function collectFormInputs() {
    const inputs = {};
    document.querySelectorAll(
      'form input[type="number"], form input[type="text"], form select'
    ).forEach(el => {
      inputs[el.name] = el.value;
    });
    return inputs;
  }

  // POST to your Flask /scenarios/save endpoint
  function saveScenario(scenarioName, inputsJson) {
    fetch('/scenarios/save', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        scenario_name: scenarioName,
        inputs_json: inputsJson
      })
    })
    .then(r => r.json())
    .then(data => {
      if (data.message) {
        alert('Scenario saved successfully!');
      } else {
        alert('Error: ' + (data.error || 'Unknown error'));
      }
    })
    .catch(err => {
      alert('Network error: ' + err);
    });
  }

  // Entry point for Save Scenario button
  function triggerSaveScenario() {
    // 1) Redirect anonymous users
    if (!isUserLoggedIn) {
      alert('You need to register or log in to save a scenario.');
      return;
    }

    // 2) Ensure they entered a name
    const name = document.getElementById('scenario_name_input').value.trim();
    if (!name) {
      alert('Please enter a scenario name before saving.');
      return;
    }

    // 3) Collect the inputs and send
    const inputsJson = collectFormInputs();
    saveScenario(name, inputsJson);
  }

  // Load + Delete helpers
  function loadSelectedScenario() {
    const select = document.getElementById('load_scenario_select');
    const scenarioId = select.value;
    if (!scenarioId) {
      alert('Please select a scenario to load.');
      return;
    }

    fetch(`/scenarios/load/${scenarioId}`)
      .then(response => {
        if (!response.ok) throw new Error('Scenario not found');
        return response.json();
      })
      .then(data => {
        const inputs = data.inputs_json;

        // Iterate all keys in inputs JSON and set form values
        Object.entries(inputs).forEach(([key, value]) => {
          const el = document.querySelector(`[name="${key}"]`);
          if (el) {
            if (el.tagName.toLowerCase() === 'select') {
              el.value = value.toString();
            } else {
              el.value = value;
            }
          }
        });

        // Set the dropdown selection explicitly to the loaded scenario
        select.value = data.id || data.scenario_id || scenarioId;

        alert(`Loaded scenario: ${data.scenario_name}`);
      })
      .catch(err => alert('Failed to load scenario: ' + err.message));
  }

  function deleteSelectedScenario() {
    const select = document.getElementById('load_scenario_select');
    const scenarioId = select.value;

    if (!scenarioId) {
      alert('Please select a scenario to delete.');
      return;
    }

    if (!confirm('Are you sure you want to delete this scenario? This action cannot be undone.')) {
      return;
    }

    fetch(`/scenarios/delete/${scenarioId}`, {
      method: 'DELETE',
    })
    .then(response => {
      if (!response.ok) throw new Error('Failed to delete scenario.');
      return response.json();
    })
    .then(data => {
      alert(data.message || 'Scenario deleted successfully.');
      // Remove deleted option from select dropdown
      const optionToRemove = select.querySelector(`option[value="${scenarioId}"]`);
      if (optionToRemove) optionToRemove.remove();
      select.value = ''; // reset selection
    })
    .catch(err => alert('Error deleting scenario: ' + err.message));
  }
</script>





{% endblock %}

