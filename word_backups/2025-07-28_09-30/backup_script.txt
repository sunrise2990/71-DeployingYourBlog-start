from datetime import datetime, timedelta
from pathlib import Path
import shutil
import os
import sys

if hasattr(sys, 'ps1'):
    print("💾 Running in interactive mode. Be sure all files are saved.")
else:
    print("🔍 Ensuring all files are saved before proceeding.")

# === CONFIGURATION ===
N_DAYS = 3
BACKUP_ROOT = Path("word_backups")
timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
backup_dir = BACKUP_ROOT / timestamp

# === STEP 1: Create timestamped backup subfolder ===
backup_dir.mkdir(parents=True, exist_ok=True)

# === STEP 2: Copy templates/*.html ===
template_dir = Path("templates")
for html_file in template_dir.glob("*.html"):
    dst_file = backup_dir / f"{html_file.stem}.txt"
    shutil.copy2(html_file, dst_file)
    print(f"✅ Copied: {html_file} → {dst_file}")

# === STEP 3: Copy top-level files ===
top_level_files = [
    ".env", ".env.local", ".gitignore", "backup_script.py", "forms.py",
    "main.py", "migrate.py", "Procfile", "requirements.txt", "wsgi.py", "routes.py",
]

for filename in top_level_files:
    src = Path(filename)
    if src.exists():
        dst_file = backup_dir / f"{src.stem}.txt"
        shutil.copy2(src, dst_file)
        print(f"✅ Copied: {src} → {dst_file}")
    else:
        print(f"⚠️ Skipped (not found): {src}")

# === STEP 4: Copy CSS ===
css_file = Path("static/css/styles.css")
css_backup_dir = backup_dir / "css"
css_backup_dir.mkdir(parents=True, exist_ok=True)

if css_file.exists():
    dst_file = css_backup_dir / "styles_backup.css"
    shutil.copy2(css_file, dst_file)
    print(f"🎨 Copied CSS: {css_file} → {dst_file}")
else:
    print(f"⚠️ CSS file not found: {css_file}")

# === STEP 5: Copy models/retirement/retirement_cal.py ===
retirement_calc_path = Path("models/retirement/retirement_calc.py")
retirement_backup_dir = backup_dir / "models_retirement"
retirement_backup_dir.mkdir(parents=True, exist_ok=True)

if retirement_calc_path.exists():
    dst_file = retirement_backup_dir / "retirement_cal.txt"
    shutil.copy2(retirement_calc_path, dst_file)
    print(f"📁 Copied: {retirement_calc_path} → {dst_file}")
else:
    print(f"⚠️ File not found: {retirement_calc_path}")

# === STEP 6: Delete old folders, keeping 2 most recent ===
cutoff = datetime.now() - timedelta(days=N_DAYS)
all_folders = [f for f in BACKUP_ROOT.iterdir() if f.is_dir()]

valid_folders = []
for f in all_folders:
    try:
        ts = datetime.strptime(f.name, "%Y-%m-%d_%H-%M")
        valid_folders.append((f, ts))
    except ValueError:
        print(f"⚠️ Skipped (invalid format): {f.name}")

# Sort by time descending
valid_folders.sort(key=lambda x: x[1], reverse=True)

# Keep two newest, delete old ones older than cutoff
for i, (folder, folder_time) in enumerate(valid_folders):
    if i >= 2 and folder_time < cutoff:
        shutil.rmtree(folder)
        print(f"🗑️ Deleted old backup: {folder}")

