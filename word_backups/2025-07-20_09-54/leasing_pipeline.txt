<!-- templates/leasing_pipeline.html -->
{% extends "base.html" %}
{% block content %}

<!-- Hero Banner -->
<header class="masthead" style="background-image: url('{{ url_for('static', filename='assets/img/home-bg3.jpg') }}')">
  <div class="container position-relative px-4 px-lg-5">
    <div class="row gx-4 gx-lg-5 justify-content-center">
      <div class="col-md-10 col-lg-8 col-xl-7">
        <div class="site-heading">
          <h1>Leasing Budget Automation</h1>
          <span class="subheading">Python + SQL + Excel = Fully Integrated Rent Forecasts</span>
        </div>
      </div>
    </div>
  </div>
</header>

<!-- Main Content -->
<main class="container px-4 px-lg-5 mt-5">
  <div class="row gx-4 gx-lg-5 justify-content-center">
    <div class="col-md-12 col-lg-12 col-xl-10">

      <!-- Executive Summary -->
      <section id="exec-summary" class="mb-5">
        <h2>💼 Executive Summary</h2>
          <p>
            This solution automates leasing budget forecasting across 400+ tenants across 100+ commercial properties, covering more than 700 active lease exposures.
            It bridges <strong>Yardi data queried by SQL</strong>, <strong>Excel inputs</strong>, and <strong>Python processing</strong> to generate
            a 5–7 year outlook for base rent, vacancy, and GLA — fully integrated into a dynamic Excel workbook.
          </p>
        <ul>
          <li><strong>Portfolio:</strong> Office, Retail, Industrial properties</li>
          <li><strong>Forecasting Horizon:</strong> 2025 to 2029</li>
          <li><strong>Tools:</strong> Excel, Python (pandas, xlwings), SQL (Athena), SharePoint, Task Scheduler</li>
          <li><strong>Output:</strong> Excel workbook with dynamic projections, rent roll validations, and summary reports</li>
        </ul>
          <p><strong>Fully integrated into a dynamic Excel workbook.</strong></p>
      </section>

  <section id="table-of-contents">
  <h3>📌 Table of Contents</h3>
  <ul>
    <li><a href="#exec-summary">Executive Summary</a></li>
    <li><a href="#business-impact">Business Impact</a></li>
    <li><a href="#leasing-flow">Simplified Leasing Flow</a></li>
    <li><a href="#automation">Leasing Automation in Action</a></li>
    <li><a href="#input-output">From Input to Output</a></li>
    <li><a href="#rent-trends">Net Rent Trends</a></li>
    <li><a href="#pipeline">Leasing Pipeline Overview</a></li>
    <li><a href="#architecture">Dataflow Architecture</a></li>
    <li><a href="#tech-flow">Technical Flow</a></li>
    <li><a href="#walkthrough">Full Walkthrough</a></li>
    <li><a href="#python modules">Python Modules</a></li>
    <li><a href="#challenges">Challenges Resolved</a></li>
    <li><a href="#reflections">Reflections</a></li>
  </ul>
</section>

<!-- Business Impact -->
      <section id="business-impact" class="mb-5">
        <h2>📈 Business Impact</h2>
        <ul>
          <li>✅ Replaced manual workbooks with automated Python logic</li>
          <li>⚡ <strong><span style="background-color: #fff3cd; color: #856404; padding: 3px 8px; border-radius: 5px;">⏱️ Reduced from 3 weeks to 10 minutes</span></strong></li>
          <li>🔍 Created a single source of truth for all leasing assumptions</li>
          <li>🧾 Enabled quick summary generation for budget sign-off</li>
        </ul>
      </section>


<!-- Simplified Leasing Flow -->
      <section id="leasing-flow" class="mb-5">
        <h3 class="mb-3"><i class="fas fa-route text-info"></i> Simplified Leasing Flow</h3>
        <p>This diagram provides a high-level overview of the leasing process used to generate projections from multiple data sources.</p>
        <div class="text-center mt-3 mb-3">
          <img src="{{ url_for('static', filename='assets/img/leasing_diagram.png') }}"
               alt="Simplified Leasing Flow"
               class="img-fluid shadow-sm"
               style="max-width: 850px;">
        </div>
      <p>🔄 This diagram outlines how leasing data flows from raw Yardi exports and team assumptions through Python logic into monthly rent projections, vacancy tracking, and Excel reports — all fully automated.</p>
      </section>

<!-- Animated Process GIF -->
<section id="automation" class="mb-5">
  <h3 class="mb-3"><i class="fas fa-play-circle text-success"></i> Leasing Automation in Action</h3>
  <p>This animation walks through the 6-step leasing forecast pipeline — from pulling in-place leases from Yardi to auto-generating Excel dashboards.</p>
  <div class="text-center">
    <img src="{{ url_for('static', filename='assets/img/leasing_sequence.gif') }}"
         alt="Animated Leasing Pipeline"
         class="img-fluid shadow-sm"
         style="max-width: 1000px;">
  </div>
        <p class="fst-italic mt-2 text-muted">
  ① SQL pull → ② Leasing inputs → ③ Python logic → ④ Writeback → ⑤ Power Query → ⑥ Dashboard output
</p>
</section>


<!-- From Input to Output -->
      <section id="input-output" class="mb-5">
        <h2><i class="fas fa-chart-line text-success"></i>📝 From Input to Output</h2>
        <p>Below are examples of how leasing team assumptions entered in Excel (purple fields) directly impact summary reports. After updating assumptions, simply run the Python script and click <strong>Refresh All</strong> in Excel to instantly generate updated visuals:</p>
        <h4 class="mt-4">🔧 Leasing Inputs (Editable Fields)</h4>
        <div class="text-center mb-4">
          <img src="{{ url_for('static', filename='assets/img/leasing_inputs_example.png') }}"
               alt="Leasing Input Tab"
               class="img-fluid shadow-sm"
               style="max-width: 1000px;">
        </div>
        <p>✏️ Leasing assumptions are entered here — including lease start/end dates, rates, and incentives — which directly drive downstream rent projections and KPIs.</p>

        <h4 id="rent-trends" class="mt-4">📊 Net Rent Comparison (2024F vs 2025B)</h4>
        <div class="text-center mb-4">
          <img src="{{ url_for('static', filename='assets/img/net_rent_summary.png') }}"
               alt="Net Rent Summary"
               class="img-fluid shadow-sm"
               style="max-width: 900px;">
        </div>

        <h4 class="mt-4">📈 Yearly Net Rent Trend (2023–2029)</h4>
        <div class="text-center mb-4">
          <img src="{{ url_for('static', filename='assets/img/net_rent_7yr_trend.png') }}"
               alt="7 Year Net Rent Trend"
               class="img-fluid shadow-sm"
               style="max-width: 1100px;">
        </div>

        <p>📌 These visuals help validate budget assumptions and explain key variances across time, asset class, and tenant level — making sign-off faster and more accurate.</p>
      </section>

      <!-- Leasing Pipeline Overview -->
      <section id="pipeline" class="mb-5">
        <h2><i class="fas fa-brain text-danger"></i>📊 Leasing Pipeline Overview</h2>
        <p class="lead">Explore how data flows from our Yardi systems through Excel and Python automation pipelines.</p>
      </section>


<!-- Dataflow Architecture -->
      <section id="architecture" class="mb-5">
        <h3 class="mb-3 ps-3">
          <i class="fas fa-network-wired text-primary"></i>📈 Dataflow Architecture (Detail)
        </h3>
        <p class="ps-3">This visual summarizes the full-stack integration across systems:</p>

        <div class="text-center" style="padding-left: 5%;">
          <img src="{{ url_for('static', filename='assets/img/leasing_architecture.png') }}"
               alt="Leasing Data Architecture"
               style="width: 150%; max-width: 1600px; display: inline-block;"
               class="shadow-sm">
        </div>
      </section>

      <!-- Technical Flow -->
      <section id="tech-flow" class="mb-5">
        <h2><i class="fas fa-cogs"></i> Technical Flow</h2>
        <ol>
          <li><strong>SQL Data Pull:</strong> Extracts 4 core tables from 1,000+ via Athena, including historical and future rent rolls</li>
          <li><strong>Load to Excel:</strong> Results populate <code>7yrBaseRent</code>, <code>RentRoll</code>, and <code>Sqft</code> tabs</li>
          <li><strong>Read via xlwings:</strong> Python loads both Yardi data and leasing inputs from <code>Inputs</code> tab</li>
          <li><strong>DataFrame Logic:</strong>
            <ul>
              <li>Combine Yardi leases + leasing team assumptions</li>
              <li>Unnest each row into monthly charges (2023–2029)</li>
              <li>Inject free rent as negative entries</li>
              <li>Amortize TI, LC, admin fees across term</li>
              <li>Calculate NER at tenant and property level</li>
            </ul>
          </li>
          <li><strong>Vacancy Integration:</strong> Identify unoccupied months by comparing against a unit-level GLA baseline</li>
          <li><strong>Output to Excel:</strong> Write to <code>all_unnest</code>, <code>GLA_Month</code>, and <code>Summary Report</code></li>
          <li><strong>Validation:</strong> Merge with rent roll to detect mismatch</li>
          <li><strong>Backup:</strong> Archive <code>Inputs</code> and validation data daily via SharePoint</li>
        </ol>
      </section>

      <!-- Full Walkthrough -->
      <section id="walkthrough" class="mb-5">
        <h2>🔍 Full Walkthrough: From Raw Data to Instant Rent Forecasts</h2>
        <p>This section walks through how the leasing budget automation works behind the scenes — from SQL to Excel to Python — and shows real code examples for each part of the pipeline.</p>

        <h4 class="mt-4 text-primary">1. 🔄 SQL Data Extraction</h4>
        <div class="code-block">
        -- extract 7 year in-place lease data<br>
        WITH dates AS (SELECT CAST('2023-1-1' AS DATE) AS effect_date),<br>
        aa AS (<br>
        &nbsp;&nbsp;SELECT *, un.scode as unit_no, round((unit_sqft * yearlyrate / 12),2) AS monthamount<br>
        &nbsp;&nbsp;FROM (SELECT<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.scode as property_code,cr.hunit as unit_code,cr.dcontractarea as unit_sqft,t.slastname as tenant_name,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;t.scode as tenant_code, COALESCE(t.dtleasefrom, t.dtmovein) as lease_from, COALESCE(t.dtmoveout, t.dtleaseto) as lease_to,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;cr.dtfrom as charge_from, cr.dtto as charge_to, ct.sname as charge_code, round(cr.dmonthlyamount*12/NULLIF(cr.dcontractarea,0),2) as yearlyrate, cr.hamendment, cr.hunit as dummy,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;cr.dadminpercent/100 as admin_fee, CASE WHEN cr.hchargecode = 70 THEN 'gross' ELSE 'net' END AS net_gross, d.effect_date<br>
        &nbsp;&nbsp;&nbsp;&nbsp;FROM yardi.camrule cr<br>
        &nbsp;&nbsp;&nbsp;&nbsp;JOIN yardi.tenant t ON t.hmyperson = cr.htenant JOIN yardi.property p ON p.hmy = t.hproperty<br>
        &nbsp;&nbsp;&nbsp;&nbsp;LEFT JOIN yardi.attributes a ON p.scode = a.scode AND a.subgroup1 = 'IPP Core'<br>
        &nbsp;&nbsp;&nbsp;&nbsp;JOIN yardi.listprop l ON l.hproperty = t.hproperty LEFT JOIN yardi.unit un ON un.hmy = cr.hunit<br>
        &nbsp;&nbsp;&nbsp;&nbsp;LEFT JOIN yardi.chargtyp ct ON cr.hchargecode = ct.hmy CROSS JOIN dates d<br>
        &nbsp;&nbsp;&nbsp;&nbsp;----- omitted codes -------
        </div>

        <h4 class="mt-4 text-primary">2. 📥 Load Queried Data into Excel</h4>
        <ul>
          <li><code>7yrBaseRent</code></li>
          <li><code>RentRoll</code></li>
          <li><code>Sqft</code></li>
          <li><code>Inputs</code> (for leasing assumptions)</li>
        </ul>

        <h4 class="mt-4 text-primary">3. 📊 Read Excel via xlwings</h4>
        <pre><code class="language-python">
def load_and_combine_tables(wb):
    df_base = pd.read_excel(wb.fullname, sheet_name='7yrBaseRent')
    df_input = pd.read_excel(wb.fullname, sheet_name='Inputs')
    return pd.concat([df_base, df_input], ignore_index=True)
        </code></pre>

        <h4 class="mt-4 text-primary">4. 🧮 Unnest Charges Over Time</h4>
        <pre><code class="language-python">
def unnest_charges(df, wb):
    df_expanded = []
    for _, row in df.iterrows():
        for month in pd.date_range(row['start_date'], row['end_date'], freq='MS'):
            rent = row['yearly_rate'] / 12
            if month in row['free_rent_months']:
                rent = 0
            df_expanded.append({**row, 'month': month, 'monthly_rent': rent})
    return pd.DataFrame(df_expanded)
        </code></pre>

        <h4 class="mt-4 text-primary">5. 🏚 Vacancy Detection</h4>
        <pre><code class="language-python">
def integrate_vacancy(df, wb, all_months):
    df_sqft = pd.read_excel(wb.fullname, sheet_name='Sqft')
    df['is_vacant'] = ~df.apply(
        lambda row: (row['unit_no'], row['month']) in
        df_sqft[['unit_no', 'month']].itertuples(index=False),
        axis=1
    )
    return df
        </code></pre>

        <h4 class="mt-4 text-primary">6. 💾 Output to Excel</h4>
        <pre><code class="language-python">
sheet = wb.sheets['all_unnest']
sheet.range("A2").value = df_final
        </code></pre>

        <h4 class="mt-4 text-primary">7. 🧾 Validation</h4>
        <pre><code class="language-python">
def update_status_with_rent_roll_and_inputs(wb):
    rentroll = pd.read_excel(wb.fullname, sheet_name='RentRoll')
    status = df_final.merge(rentroll, on='unit_no', how='left', suffixes=('', '_actual'))
    status['discrepancy'] = status['monthly_rent'] != status['monthly_rent_actual']
    return status
        </code></pre>

        <h4 class="mt-4 text-primary">8. 🔁 Backup and Refresh</h4>
        <p>Backups of inputs and summary reports are archived daily to SharePoint using Windows Task Scheduler.</p>
      </section>

<!-- Python Modules -->
    <section id="python-modules" class="mb-5">
      <h2>🧪 Python Modules</h2>

      <h4 class="mt-4 text-primary">🔁 1. load_and_combine_tables(wb)</h4>
      <div class="code-block">
    def load_and_combine_tables(wb):<br>
    &nbsp;&nbsp;all_charges_sheet = wb.sheets["7yrBaseRent"]<br>
    &nbsp;&nbsp;all_charges_range = all_charges_sheet.range("A1").expand()<br>
    &nbsp;&nbsp;all_charges_df = all_charges_range.options(pd.DataFrame, header=1, index=False).value<br>
    &nbsp;&nbsp;all_charges_df['Source'] = 'yardi'<br>
    &nbsp;&nbsp;all_charges_df['unit_no'] = all_charges_df['unit_no'].apply(lambda x: "'" + str(x) if pd.notna(x) else x)<br>
    &nbsp;&nbsp;all_charges_df = all_charges_df[all_charges_df['unit_no'].str.strip("'").notna() & (all_charges_df['unit_no'].str.strip("'") != "")]<br>
    &nbsp;&nbsp;inputs_sheet = wb.sheets["Inputs"]<br>
    &nbsp;&nbsp;inputs_range = inputs_sheet.range("S27:AL3000")<br>
    &nbsp;&nbsp;&nbsp;&nbsp;----- omitted codes -------
      </div>

      <h4 class="mt-4 text-primary">📆 2. unnest_charges(df1, wb)</h4>
      <div class="code-block">
    def unnest_charges(df1, wb):<br>
    &nbsp;&nbsp;global start_date, end_date, all_months; df_final = df1.copy(); df_final['unit_no'] = df_final['unit_no'].astype(str)<br>
    &nbsp;&nbsp;df_final = df_final[df_final['unit_no'].notna() & (df_final['unit_no'] != '')]<br>
    &nbsp;&nbsp;for month_end in all_months: df_final[month_end.strftime('%Y-%m-%d')] = np.nan<br>
    &nbsp;&nbsp;for index, row in df_final.iterrows():<br>&nbsp;&nbsp;&nbsp;&nbsp;if pd.notna(row['yearlyrate']) and pd.notna(row['unit_sqft']):
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;charge_from = max(pd.Timestamp(row['charge_from']), start_date)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;charge_to = min(pd.Timestamp(row['charge_to']), end_date)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for month in all_months:<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;month_start = month.to_timestamp(how='start')<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;month_end = month.to_timestamp(how='end')<br>
    &nbsp;&nbsp;&nbsp;&nbsp;----- omitted codes -------
      </div>

      <h4 class="mt-4 text-primary">🏢 3. integrate_vacancy(df_final, wb, all_months)</h4>
      <div class="code-block">
    def integrate_vacancy(df_final, wb, all_months):<br>
    &nbsp;&nbsp;sqft_sheet = wb.sheets['sqft']; sqft_range = sqft_sheet.range('A1').expand()<br>
    &nbsp;&nbsp;sqft_df = sqft_range.options(pd.DataFrame, header=1, index=False).value; sqft_df['unit_no'] = "'" + sqft_df['unit_no'].astype(str)<br>
    &nbsp;&nbsp;unit_entries = []<br>
    &nbsp;&nbsp;for _, unit in sqft_df.iterrows(): property_code = unit['property_code']; unit_no = unit['unit_no']; unit_record = {'Source': 'vacancy', 'property_code': property_code, 'prop_name': None, 'unit_no': unit_no}; ----- omitted codes -------
    &nbsp;&nbsp;&nbsp;&nbsp;----- omitted codes -------
      </div>

      <h4 class="mt-4 text-primary">📏 4. process_sqft_month(wb)</h4>
      <div class="code-block">
    def process_sqft_month(wb):<br>
    &nbsp;&nbsp;global start_date, end_date, all_months; all_months = pd.date_range(start_date, end_date, freq='ME').strftime('%Y-%m-%d')<br>
    &nbsp;&nbsp;sqft_sheet = wb.sheets['sqft']; sqft_data_range = sqft_sheet.range('M1').expand('table')<br>
    &nbsp;&nbsp;sqft_data_df = sqft_data_range.options(pd.DataFrame, header=1, index=False).value.dropna(subset=['start_date']).sort_values(by='start_date')<br>
    &nbsp;&nbsp;data_rows = []
    &nbsp;&nbsp;columns = ['property_code', 'unit_no', 'start_date'] + list(all_months)<br>
    &nbsp;&nbsp;for _, group in sqft_data_df.groupby(['property_code', 'unit_no']):<br>
    &nbsp;&nbsp;&nbsp;&nbsp;group = group.reset_index(drop=True)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;for idx, row in group.iterrows():<br>
    &nbsp;&nbsp;&nbsp;&nbsp;----- omitted codes -------
      </div>

      <h4 class="mt-4 text-primary">📊 5. update_status_with_rent_roll_and_inputs(wb)</h4>
      <div class="code-block">
    def update_status_with_rent_roll_and_inputs(wb):<br>
    &nbsp;&nbsp;# Compares forecast vs actual data for reporting and control validation<br>
    &nbsp;&nbsp;pass  # (Function logic omitted here — add if available)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;----- omitted codes -------
      </div>

      <p class="mt-3">All Excel interaction handled via <code>xlwings</code> — ensuring seamless link to open or saved workbooks.</p>
    </section>


      <!-- Challenges -->
      <section id="challenges" class="mb-5">
        <h2>🛠 Challenges Solved</h2>
        <ul>
          <li><strong>Duplicate assumptions:</strong> Detected overlap with activated leases → override logic added</li>
          <li><strong>Excel memory limits:</strong> Large formula-based workbook → replaced with Python calculations</li>
          <li><strong>Manual errors in rent roll match:</strong> Created full validation logic across merged keys</li>
        </ul>
      </section>

      <!-- Reflections -->
      <section id="reflections" class="mb-5">
        <h2>🔍 Reflections</h2>
        <ul>
          <li>This was not just a coding task — it redefined how leasing forecasts are created and validated</li>
          <li>Team buy-in increased as confidence in data grew</li>
          <li>Demonstrated value of domain-specific automation in Finance</li>
        </ul>
      </section>

    </div>
  </div>
</main>

{% endblock %}
